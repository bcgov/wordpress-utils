<?xml version="1.0"?>
<ruleset xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" name="BCGov Coding Standards" xsi:noNamespaceSchemaLocation="https://raw.githubusercontent.com/squizlabs/PHP_CodeSniffer/master/phpcs.xsd">

	<description>BCGov Coding Standards overrides</description>

	<!-- Exclude the Composer Vendor directory. -->
	<exclude-pattern>/vendor/*</exclude-pattern>

	<!-- Exclude the Node Modules directory. -->
	<exclude-pattern>/node_modules/*</exclude-pattern>

	<!-- Exclude minified Javascript files. -->
	<exclude-pattern>*.min.js</exclude-pattern>
	<exclude-pattern>*.js</exclude-pattern>
  	<exclude-pattern>/tests/_*</exclude-pattern>
	<exclude-pattern>/coverage/*</exclude-pattern>
	<exclude-pattern>/vendor/*</exclude-pattern>
	<exclude-pattern>/node_modules/*</exclude-pattern>
	<exclude-pattern>/dist*/*</exclude-pattern>
	<exclude-pattern>*/build/*</exclude-pattern>
    <exclude-pattern>*Scripts.php</exclude-pattern>

	<!-- Until a better solution comes to code check blade files. -->
	<exclude-pattern>*.blade.php</exclude-pattern>


	<!-- Include the WordPress-Extra standard. -->
	<rule ref="WordPress-Extra">
		<!--
		We may want a middle ground though. The best way to do this is add the
		entire ruleset, then rule by rule, remove ones that don't suit a project.
		We can do this by running `phpcs` with the '-s' flag, which allows us to
		see the names of the sniffs reporting errors.
		Once we know the sniff names, we can opt to exclude sniffs which don't
		suit our project like so.

		The below two examples just show how you can exclude rules.
		They are not intended as advice about which sniffs to exclude.
		-->

		<!--
		<exclude name="WordPress.WhiteSpace.ControlStructureSpacing"/>
		<exclude name="WordPress.Security.EscapeOutput"/>
		-->
	</rule>

	<!-- Let's also check that everything is properly documented. -->
	<rule ref="WordPress-Docs"/>

	<!-- Add in some extra rules from other standards. -->
	<rule ref="Generic.CodeAnalysis.UnusedFunctionParameter"/>
	<rule ref="Generic.Commenting.Todo"/>
	<rule ref="Generic.WhiteSpace.DisallowSpaceIndent.SpacesUsed" ><severity>0</severity></rule>
	<rule ref="Universal.Arrays.DisallowShortArraySyntax.Found" ><severity>0</severity></rule>
    <rule ref="Generic.WhiteSpace.DisallowTabIndent"><type>warning</type><severity>0</severity></rule>
	<rule ref="Squiz.Commenting.FileComment.Missing"><severity>0</severity></rule>
	<rule ref="Squiz.Commenting.FileComment.SpacingAfterComment"><severity>0</severity></rule>
  	<rule ref="WordPress.WP.I18n.TextDomainMismatch"><severity>0</severity></rule>
	<rule ref="Universal.WhiteSpace.PrecisionAlignment.Found"><severity>0</severity></rule>
	<rule ref="WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedFunctionFound"><severity>0</severity></rule>
	<rule ref="WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedVariableFound"><severity>0</severity></rule>
	<rule ref="WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedNamespaceFound"><severity>0</severity></rule>
	<!--<rule ref="WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedNamespaceFound"><type>warning</type></rule>-->
	<rule ref="WordPress.Files.FileName.InvalidClassFileName"><severity>0</severity></rule>
	<rule ref="WordPress.Files.FileName.NotHyphenatedLowercase"><severity>0</severity></rule>
	<rule ref="WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase"><severity>warning</severity></rule>

	<rule ref="WordPress.NamingConventions.PrefixAllGlobals.NonPrefixedHooknameFound"><severity>0</severity></rule>
	<rule ref="WordPress.NamingConventions.PrefixAllGlobals.DynamicHooknameFound"><severity>0</severity></rule>
	<rule ref="WordPress.NamingConventions.ValidHookName.UseUnderscores"><severity>0</severity></rule>
	<!-- gives warning if there is no domain after __('string', domain) -->
	<rule ref="WordPress.WP.I18n.MissingArgDomain"><severity>0</severity></rule>

	<!-- gives warning if there isn't a comment after parameter -->
	<rule ref="Squiz.Commenting.FunctionComment.MissingParamComment"><severity>0</severity></rule>
	<rule ref="Squiz.ControlStructures.ControlSignature.NewlineAfterOpenBrace">
        <severity>0</severity>
    </rule>
	<config name="minimum_supported_wp_version" value="5.6"/>
	<rule ref="WordPress.WP.I18n">
		<properties>
			<property name="text_domain" type="array">
				<element value="my-textdomain"/>
				<element value="library-textdomain"/>
			</property>
		</properties>
	</rule>

	<rule ref="WordPress.NamingConventions.PrefixAllGlobals">
		<properties>
			<property name="prefixes" type="array">
				<element value="my_prefix"/>
			</property>
		</properties>
	</rule>
	    <!-- Ban some functions -->
    <rule ref="Generic.PHP.ForbiddenFunctions">
        <properties>
            <property name="forbiddenFunctions" type="array">
                <element key="logger" value="echo" />
            </property>
        </properties>
        <type>error</type>
    </rule>

	<!-- Include the PHPCompatibility for WP rules. -->
	<rule ref="PHPCompatibilityWP" />
	<!-- Set PHPCompatibilityWP to test against PHP 7.4 to 8.3. -->
	<config name="testVersion" value="7.4-8.3"/>

</ruleset>
